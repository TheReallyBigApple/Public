



check your blackberry


To prevent Microsoft from blocking macros in a workbook that’s not in a trusted location
	Right Click on the File
	Properties
	Check off “Unblock”



Parameters

/r	to open a book as read only
excel.exe /r "c:\My Folder\book1.xlsx"
/p workbook path
	specifies a folder as the active working folder (for example, the folder that is pointed to in the Save As dialog box).
excel.exe /p "c:\My Folder"

/s or /safemode
	Forces Excel to bypass all files that are stored in startup directories, such as the default XLStart folder located in the directory where Excel or Microsoft Office is installed.

/x  		Starts a new instance (a separate process) of Excel.
		excel.exe /x "c:\My Folder\book1.xlsx"	





https://learn.microsoft.com/en-us/deployoffice/security/internet-macros-blocked
https://www.wallstreetmojo.com/add-ins-in-excel/




' different ways to reference a Name
' note MyName is defined in 2 worksheets, Data and Report
'   its defined in worksheet scope in Report, but workbook scope in Data
'   but note if Report is active, then Report scope supercedes that of Data

Sub DifferentWays()

Dim wsTarget As Worksheet
Dim wbBook As Workbook

Set wbBook = ThisWorkbook
With wbBook
    Set wsTarget = .Worksheets("Report")
 
End With

wsTarget.Activate



Debug.Print Range("MyName")                       ' MyName_Report
Debug.Print Sheet2.Range("MyName")                ' MyName_Data
Debug.Print Worksheets("Data").Range("MyName")    ' MyName_Data
Debug.Print [MyName]                              ' MyName_Report
Debug.Print wsTarget.Range("MyName")              ' MyName_Report

Worksheets("NewSheet").Activate
Debug.Print Range("MyName")                       ' MyName_Data
Debug.Print [MyName]                              ' MyName_Data
    

End Sub














Private Sub f9handler()

If Range("AutoCalc") = True Then
    Application.Calculation = xlAutomatic
 Else
    Application.Calculation = xlManual
 End If
  Range("UserName").Value = VBA.Environ("USERNAME")
  Application.Calculate
End Sub




Private Function listXLLs() As Collection
  Dim list As New Collection
  Dim i As Integer
  i = 3
  
  On Error Resume Next      'ignore errors
  Dim funcInfo As Variant
  For Each funcInfo In ApplicationRegisteredFunctions
     If Right(funcInfo, 4) Like ".xll" Then list.Add funcInfo, funcInfo
     Cells(i, 8).Value = funcInfo
     i = i + 1
  Next
  Set listXLLs = list
End Function



Private Sub printAddIns()
  Dim xllPath As Variant
  Dim i As Integer
  i = 3
  Cells(4, 2).Value = "Running !"
  
 For Each xllPath In listXLLs()
    Cells(i, 5).Value = funcInfo
    Debug.Print "In workbook activate"
    i = i + 1
 Next
End Sub


Public Sub AllAddins()
'UpdatebyKutools20191031
Dim xWSh As Worksheet
Dim xWB As Workbook
Dim xAddin As AddIn
Dim xCOMAddin As COMAddIn
Dim xFA, xFCA As Integer
Dim xI As Integer
Dim xStr As String
 
On Error Resume Next
Application.DisplayAlerts = False
xStr = "Addins List"
Set xWB = Application.ActiveWorkbook
Set xWSh = xWB.Worksheets.Item(xStr)
If Not xWSh Is Nothing Then
    xWSh.Delete
End If
Set xWSh = xWB.Worksheets.Add
xWSh.Name = xStr
xWSh.Range("A1").Value = "Name"
xWSh.Range("B1").Value = "FullName"
xWSh.Range("C1").Value = "Installed"
For xFA = 1 To Application.AddIns.Count
    Set xAddin = Application.AddIns(xFA)
    xI = xFA + 1
    Range("A" & xI).Value = xAddin.Name
    Range("B" & xI).Value = xAddin.FullName
    Range("C" & xI).Value = xAddin.Installed
Next xFA
xFA = (xFA + 2)
xWSh.Range("A" & xFA).Value = "Description"
xWSh.Range("B" & xFA).Value = "progID"
xWSh.Range("C" & xFA).Value = "Connect"
For xFCA = 1 To Application.COMAddIns.Count
    xI = xFCA + xFA
    Set xCOMAddin = Application.COMAddIns(xFCA)
    Range("A" & xI).Value = xCOMAddin.Description
    Range("B" & xI).Value = xCOMAddin.progID
    Range("C" & xI).Value = xCOMAddin.Connect
Next xFCA
Application.DisplayAlerts = True
End Sub



Sub ListFolders()
Dim Fldr As String

With ActiveSheet.Range("AddinsFolder")
  .ClearContents
  .Cells(1, 1).Value = Application.UserLibraryPath
End With

End Sub







Private Function baseName(ByVal fileSpec As String) As String
   Const seperator As String = "\"
   Dim iPos As Integer

   iPos = InStr(fileSpec, seperator)
   Do While iPos <> 0
     fileSpec = Right(fileSpec, Len(fileSpec) - iPos)
     iPos = InStr(fileSpec, seperator)
  Loop

   baseName = fileSpec
End Function




'  worksheet specific subroutine
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim KeyCells As Range

    Set KeyCells = Range("A1:A1")

    If Not Application.Intersect(KeyCells, Range(Target.Address)) _
           Is Nothing Then
           
    For i = 1 To 100
    If IsEmpty(Sheet6.Cells(i, 4)) Then
        Sheet6.Cells(i, 4).Value = "A1 changed at " & Format(Now(), "h:n:s AM/PM")
        i = 100
    End If
    Next i


     
End If
End Sub








vbs example



' this script can extract all code from a spreadsheet
' the downside to the script
'	1) the target sheet will be opened
'	2) the target sheet Trust Settings for Macros must  

option explicit

Const vbext_ct_ClassModule = 2
Const vbext_ct_Document = 100
Const vbext_ct_MSForm = 3
Const vbext_ct_StdModule = 1

Main

Sub Main
    Dim xl
    Dim fs
    Dim WBook
    Dim VBComp
    Dim Sfx
    Dim ExportFolder


    If Wscript.Arguments.Count <> 1 Then
        MsgBox "As the only argument, give the FULL path to an XLS file to extract all the VBA from it."
    Else



        Set xl = CreateObject("Excel.Application")
        Set fs = CreateObject("Scripting.FileSystemObject")

        xl.Visible = true

        Set WBook = xl.Workbooks.Open(Trim(wScript.Arguments(0)))

        ExportFolder = WBook.Path & "\" & fs.GetBaseName(WBook.Name)

        fs.CreateFolder(ExportFolder)

        For Each VBComp In WBook.VBProject.VBComponents
            Select Case VBComp.Type
                Case vbext_ct_ClassModule, vbext_ct_Document
                    Sfx = ".cls"
                Case vbext_ct_MSForm
                    Sfx = ".frm"
                Case vbext_ct_StdModule
                    Sfx = ".bas"
                Case Else
                    Sfx = ""
            End Select
            If Sfx <> "" Then
                On Error Resume Next
                Err.Clear
                VBComp.Export ExportFolder & "\" & VBComp.Name & Sfx
                If Err.Number <> 0 Then
                    MsgBox "Failed to export " & ExportFolder & "\" & VBComp.Name & Sfx
                End If
                On Error Goto 0
            End If
        Next

        xl.Quit
    End If
End Sub